version: 1

service:
  name: "{{SERVICE_NAME}}"
  version: 1.0.0

# aws:
#   region: us-east-1
#   secret:
#     secretsName:
#     - "auth-keycloak"
    
# tokenCredentials:
#   - id: auth_client
#     type: clientCredentials
#     authEndpoint: "{{KEYCLOCK_AUTH_ENDPOINT}}"
#     clientId: "{{KEYCLOCK_AUTH_CLIENT_ID}}"
#     clientSecret: "{{KEYCLOCK_AUTH_CLIENT_SECRET}}"

api:
  authorization:
    algorithm: RS256
    kid: "8GVJUug3bEnolN40OafuqQnhKDwt4BLKPvHQgw7nRLI"
    type: jwks
    jwksUrl: '{{API_SECURITY_KEYCLOAK_JWKS}}'

  endpoints:
    - route: /api/mock
      method: post
      enableAnonymous: true
      actionId: post_customer_mock

    - route: /api/customer
      method: get
      actionId: get_customer

    - route: /api/customer
      method: post
      #enableAnonymous: true
      actionId: post_customer
      roles:
      - write:pix-transaction
      scopes:
      - write:pix-transaction
      claims:
      - "provider:D3"
      
    - route: /api/hellos
      method: get
      actionId: get_hello

    - route: /api/sns
      method: post
      actionId: post_sns

actions:
  - id: post_customer_mock
    type: httpRequestMock
    http:
      mock:
        # body: "{ 'Say':'Hello', 'observation': 'Will work' }"
        mirrorBody: true
        contentType: "application/json"
        statusCode: 201
        headers: 
          "mock1": "value1"
          "mock2": "value2"
          "mock3": "value2"
  
  - id: cerc_register_participant
    type: httpRequest
    http:
      request:
        insecure: true
        method: put
        url: 'https://webhook.site/e08a967f-59ba-463a-8fe2-cf173b493f34'

  - id: get_customer
    type: httpRequest
    http:
      request:
        #insecure: true
        method: post
        url: 'http://localhost:{{PORT}}/api/mock'
        mapRequestHeaders:
          - "mock1"
          - "mock2:change2"
        mapFixedHeaders:
          "req1": "value1"
          "req2": "value2"
      response:
        mapResponseHeaders:
          - "mock1"
          - "mock2:change2"
        mapFixedHeaders:
          "resp1": "value1"
          "resp2": "value2"

  - id: post_customer
    type: httpRequest
    trigger:
      before:
        contractMapId: before_customer_create
      after:
        contractMapId: after_customer_create
    http:
      request:
        method: post
        url: 'http://localhost:{{PORT}}/api/mock'

  - id: get_hello
    type: httpRequest
    http:
      request:
        method: get
        # tokenCredentialId: auth_client
        url: 'http://localhost:5250/hello'


  - id: post_sns
    type: snsPublish
    sns:
      topicArn: 'arn:aws:sns:us-east-1:864899843511:test-sns'
      filters: 
        - "customerId:{{bodyContext.customerId}}"
        - "partnerKey:{{wrenchContext.request.headers.partner-key}}"
        - "test:tes1"
      # fifo:
      #   groupId: "{{wrenchContext.request.headers.partner-key}}"
      #   dedupId: "{{wrenchContext.request.headers.partner-key}}"
        
contract:
  maps:
  - id: before_customer_create
    sequence:
    - new
    - rename
    - duplicate
    - parse
    - remove
    duplicate:
    - "newId:test.newId"
    rename:
    - "name:name2"
    - "address.district:address.district2"
    - "phoneNumber:phone.number"
    - "document.value:documentNumber"
    - "id:newId"
    new:
    - "id:{{uuid}}"
    - "created:{{time 2006-02-01 15:04:05}}"
    - "phone.type:mobile"
    - "partnerKey:{{wrenchContext.request.headers.x-partner-key}}"
    remove:
    - "document"
    parse:
      whenEquals:
        - "{{bodyContext.address.type.Mobile:Movel}}"
    
  - id: after_customer_create
    remove:
    - "uncleName"
